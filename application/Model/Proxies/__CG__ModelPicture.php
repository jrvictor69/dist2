<?php

namespace Model\Proxies\__CG__\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Picture extends \Model\Picture implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getFilename()
    {
        $this->__load();
        return parent::getFilename();
    }

    public function setFilename($filename)
    {
        $this->__load();
        return parent::setFilename($filename);
    }

    public function getMimeType()
    {
        $this->__load();
        return parent::getMimeType();
    }

    public function setMimeType($mimeType)
    {
        $this->__load();
        return parent::setMimeType($mimeType);
    }

    public function getSrc()
    {
        $this->__load();
        return parent::getSrc();
    }

    public function setSrc($src)
    {
        $this->__load();
        return parent::setSrc($src);
    }

    public function getFilenameCrop()
    {
        $this->__load();
        return parent::getFilenameCrop();
    }

    public function setFilenameCrop($filenameCrop)
    {
        $this->__load();
        return parent::setFilenameCrop($filenameCrop);
    }

    public function getMimeTypeCrop()
    {
        $this->__load();
        return parent::getMimeTypeCrop();
    }

    public function setMimeTypeCrop($mimeTypeCrop)
    {
        $this->__load();
        return parent::setMimeTypeCrop($mimeTypeCrop);
    }

    public function getSrcCrop()
    {
        $this->__load();
        return parent::getSrcCrop();
    }

    public function setSrcCrop($srcCrop)
    {
        $this->__load();
        return parent::setSrcCrop($srcCrop);
    }

    public function getClub()
    {
        $this->__load();
        return parent::getClub();
    }

    public function setClub($club)
    {
        $this->__load();
        return parent::setClub($club);
    }

    public function getPictureType()
    {
        $this->__load();
        return parent::getPictureType();
    }

    public function setPictureType($pictureType)
    {
        $this->__load();
        return parent::setPictureType($pictureType);
    }

    public function getPictureCategory()
    {
        $this->__load();
        return parent::getPictureCategory();
    }

    public function setPictureCategory($pictureCategory)
    {
        $this->__load();
        return parent::setPictureCategory($pictureCategory);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getChanged()
    {
        $this->__load();
        return parent::getChanged();
    }

    public function setChanged($changed)
    {
        $this->__load();
        return parent::setChanged($changed);
    }

    public function getCreatedBy()
    {
        $this->__load();
        return parent::getCreatedBy();
    }

    public function setCreatedBy($createdBy)
    {
        $this->__load();
        return parent::setCreatedBy($createdBy);
    }

    public function getChangedBy()
    {
        $this->__load();
        return parent::getChangedBy();
    }

    public function setChangedBy($changedBy)
    {
        $this->__load();
        return parent::setChangedBy($changedBy);
    }

    public function getState()
    {
        $this->__load();
        return parent::getState();
    }

    public function setState($state)
    {
        $this->__load();
        return parent::setState($state);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'title', 'description', 'filename', 'mimeType', 'src', 'filenameCrop', 'mimeTypeCrop', 'srcCrop', 'clubId', 'pictureTypeId', 'pictureCategoryId', 'id', 'created', 'changed', 'createdBy', 'changedBy', 'state', 'club', 'pictureType', 'pictureCategory');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}